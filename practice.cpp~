
#include <vector>
#include <iostream>
#include <stack>

void swap(int& x, int& y) {
	int temp;
	temp = x;
	x = y;
	y = temp;
}

int fibo(int n) {
	if (n < 0)
		std::cerr << "bad" << std::endl;
	if (n <= 1)
		return n;
	return fibo(n-1) + fibo(n-2);	
}

int fact(int n) {
	if (n < 0) std::cerr << "bassdf" << std::endl;
	if (n <= 1) return 1;
	return n * fact(n-1);

// return the index of the found element
int bs(int l, int r, int arr[], int t) {
	if (l>=r) return -1;
	int mid = l + (r - l) / 2;
	if (arr[mid] == t) return mid;
	else if (arr[mid] < t) return(l, mid-1, arr, t);
	else return(mid+1, r, arr, t);
}

int count_chars(std::string s) {
	char* s0 = s[0];
	while(s0 != '\0') {
		s0++;
    }
	
	return s0 - &s[0];
}

bool palindrome(std::string s) {
	int mid = s.length() / 2;
	for (int i = 0; i < mid; i++) {
		if (s[i] != s[s.length-1-i]) return false
    }
	return true;
}

bool is_prime(int n) {
	for (int i=0; i*i<n; i++) {
		if (n%i==0) return false;
	}
	return true;
}

int reverse_int(int n) {
	int counter = 0;
	int r_n;
	std::stack s;
	while(n/10 != 0) {
		counter++
		s.push(n%10);
		n /= 10;
    }

	while (counter != 0) {
		counter--;
		r_n += 10 * counter * s.pop();
	}

	return r_n;
}

bool odd_or_even(int n) {
	return (n%2==0?true:false);
}

		
		
int main() {

}
